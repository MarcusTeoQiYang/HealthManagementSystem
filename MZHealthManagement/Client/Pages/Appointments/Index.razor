@page "/appointments/"
@inject HttpClient _client
@inject IJSRuntime js
@attribute [Authorize]



<h3 class="card-title">Appointment</h3>

<a href="/appointments/create" class="btn btn-secondary">
    <span class="oi oi-plus"></span>
    Add New Appointments
</a>
<br />
<br />

@if (Appointments == null)
{
    <div class="alert alert-info">Loading Appointments...</div>
}
else
{
    <table class="table table-responsive">
        <thead>
            <tr>
                <th>AppointmentId</th>
                <th>Staff Name</th>
                <th>Location</th>
                <th>Patient Name</th>
                <th>Date Out</th>
                <th>Date In</th>

            </tr>
        </thead>
        <tbody>
            @foreach (var appointment in Appointments)
            {
                <tr>
                    <td>@appointment.Id</td>
                    <td>@appointment.Staff.Name</td>
                    <td>@appointment.Location</td>
                    <td>@appointment.Patient.Name</td>
                    <td>@appointment.DateIn</td>
                    <td>@appointment.DateOut</td>
                    <td>
                        <a href="/appointments/view/@appointment.Id" class="btn btn-primary">
                            <span class="oi oi-book"></span>
                        </a>
                        <a href="/appointments/edit/@appointment.Id" class="btn btn-warning">
                            <span class="oi oi-pencil"></span>
                        </a>
                        <button class="btn btn-danger" @onclick="@(()=>Delete(appointment.Id))">
                            <span class="oi oi-delete"></span>
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


@code {
    private List<Appointment> Appointments;

    private DateTime nullDT = new DateTime(1, 1, 1, 0, 0, 0);

    protected async override Task OnInitializedAsync()
    {
        Appointments = await _client.GetFromJsonAsync<List<Appointment>>("api/Appointments");
    }

    async Task Delete(int AppointmentId)
    {
        var appointment = Appointments.First(q => q.Id == AppointmentId);
        var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to delete {appointment.Id}?");
        if (confirm)
        {
            await _client.DeleteAsync($"api/Appointments/{AppointmentId}");
            await OnInitializedAsync();
        }
    }


}
